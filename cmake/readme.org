#+TITLE: cmake学习笔记
#+AUTHOR: svtter

** 学习记录

*** PROJECT 指令的语法是：

  #+BEGIN_SRC cmake
  PROJECT(projectname [CXX] [C] [Java])
  #+END_SRC

  你可以用这个指令定义工程名称，并可指定工程支持的语言，支持的语言列表是可以忽略的，
  默认情况表示支持所有语言。

  这个指令隐式的定义了两个 cmake 变量:
  <projectname>_BINARY_DIR 以及<projectname>_SOURCE_DIR，这里就是
  HELLO_BINARY_DIR 和 HELLO_SOURCE_DIR(所以 CMakeLists.txt 中两个 MESSAGE
  指令可以直接使用了这两个变量)，因为采用的是内部编译，两个变量目前指的都是工程所
  在路径/backup/cmake/t1，后面我们会讲到外部编译，两者所指代的内容会有所不同。
  *同时 cmake 系统也帮助我们预定义了 PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR
  变量* ，他们的值分别跟 HELLO_BINARY_DIR 与 HELLO_SOURCE_DIR 一致。
  为了统一起见，建议以后直接使用 PROJECT_BINARY_DIR，PROJECT_SOURCE_DIR，即
  使修改了工程名称，也不会影响这两个变量。如果使用了
  <projectname>_SOURCE_DIR，修改工程名称后，需要同时修改这些变量。


*** SET 指令的语法是：

    =SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])=

    现阶段，你只需要了解 SET 指令可以用来显式的定义变量即可。
    比如我们用到的是 SET(SRC_LIST main.c)，如果有多个源文件，也可以定义成：
    SET(SRC_LIST main.c t1.c t2.c)。
   
*** MESSAGE 指令的语法是：

    =MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display" ...)=

    这个指令用于向终端输出用户定义的信息，包含了三种类型:
    SEND_ERROR，产生错误，生成过程被跳过。
    SATUS，输出前缀为—的信息。
    FATAL_ERROR，立即终止所有 cmake 过程.
    
*** ADD_SUBDIRECTORY 指令

    =ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])=

    这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存
    放的位置。EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除，比如，工程
    的 example，可能就需要工程构建完成后，再进入 example 目录单独进行构建(当然，你
    也可以通过定义依赖来解决此类问题)。
    
*** 换一个地方保存目标二进制
    
    不论是 SUBDIRS 还是 ADD_SUBDIRECTORY 指令(不论是否指定编译输出目录)，我们都可
    以通过 SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量
    来指定最终的目标二进制的位置(指最终生成的 hello 或者最终的共享库，不包含编译生成
    的中间文件)
    
    #+begin_src cmake
    SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
    #+end_src
     
    在第一节我们提到了<projectname>_BINARY_DIR 和 PROJECT_BINARY_DIR 变量，他
    们指的编译发生的当前目录，如果是内部编译，就相当于 PROJECT_SOURCE_DIR 也就是
    工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的 build
    目录。
    所以，上面两个指令分别定义了：
    可执行二进制的输出路径为 build/bin 和库的输出路径为 build/lib.

*** 编译静态库和动态库

    我们需要的是名字相同的静态库和动态库，因为 target 名
    称是唯一的，所以，我们肯定不能通过 ADD_LIBRARY 指令来实现了。这时候我们需要用到
    另外一个指令：

    #+BEGIN_SRC cmake
 SET_TARGET_PROPERTIES(target1 target2 ...
 PROPERTIES prop1 value1
 prop2 value2 ...)
    #+END_SRC


** Day - 5

   前几天的内容就记录在学习记录里面了，今天的内容单独开一个标题。。
   构建失败，如果需要查看细节，可以使用第一节提到的方法
#+BEGIN_SRC bash
make VERBOSE=1 
#+END_SRC

   查看当前可执行文件的依赖:

#+BEGIN_SRC
ldd src/main
       linux-gate.so.1 => (0xb7fa8000)
       libc.so.6 => /lib/libc.so.6 (0xb7e3a000)
       /lib/ld-linux.so.2 (0xb7fa9000)
#+END_SRC
   如果是动态链接，那么这个列表应该包含动态链接的库；
   如果是静态链接，那么这个列表则应该只有几个库文件。



** FAQ
   
*** cmake

在Cmake2版本中，输出编译的文件到bin目录，是这样的

#+BEGIN_SRC cmake
# 设定可执行二进制文件的目录
SET( EXECUTEABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#+END_SRC

在Cmake3版本中，则是这样的：

#+BEGIN_SRC cmake
# new: cmake3 中需要使用如下代码保证行为
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
#+END_SRC

**** reference

     [[https://stackoverflow.com/questions/15728805/output-the-binaries-in-the-projects-root-bin-subfolder-using-cmake][Stackoverflow]]

*** 加链接库
    
    cmake 中添加链接库，比如加realsense2，首先加一条 =find_package= 。
    
#+BEGIN_SRC cmake
find_package(realsense2)
#+END_SRC

使用 =target_link_libraries( main realsense2 ${OpenCV_LIBS} )= ，在编译出的可执行文件中，
增加 =realsense2= 库，这个 =realsense2= 为啥叫这个？在 =librealsense= 的 =CMakeLists.txt= 中
标记了 =project(realsense2)= 。
    

** Reference
   - [[http://file.ncnynl.com/ros/CMake%2520Practice.pdf][Cmake实践]]
