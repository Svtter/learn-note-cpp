#+TITLE: CPP-primer学习笔记
#+AUTHOR: svtter
#+OPTION: toc:2
* day1

  简单看了一下前言部分，发现重复的内容很多，简单勾出了需要再看的部分。

* day2 :auto:

** c++11 新特性 auto
  
  auto会根据赋值的类型自主推断变量的类型

#+BEGIN_SRC cpp

#include <iostream>

using namespace std;

int main()
{
    auto i = 0, &r = i;
    auto a = r;
    cout << i << r << a << endl;
    // 0 0 0
    i = 2;
    cout << i << r << a << endl;
    // 2 2 0

    // test.cc:15:10: error: declaration of ‘auto b’ has no initializer
    auto b;


    return 0;
}
#+END_SRC

** 新特性 decltype

   =decltype= 可以使用函数以及其他变量的类型，来决定自己的类型

    #+BEGIN_SRC cpp

#include <iostream>
// 查看变量类型
#include <typeinfo>

using namespace std;

int f()
{
    return 20;
}

double f2()
{
    return 20.0;
}

int main()
{
    double x = 21.0;
    decltype(f()) sum = x;
    cout << typeid( sum ).name() << endl;
    cout << sum << endl;
    //i
    //21

    decltype(f2()) sum2 = x;
    cout << typeid( sum2 ).name() << endl;
    cout << sum2 << endl;
    //d
    //21

    return 0;
}
    #+END_SRC


* day3 :namespace:

这一章节也没讲什么太多的内容，就是 =using std::cin= 以后，cin 可以直接用，cout 不行

=String= 这个类型，其实是 =std= 中的一个库。由此可见其实 =cpp= 和 =c= 隔离的还是很好的。

* day4 vector :vector:
  
  - =vector= 是对象的集合，可以看成一个可长度的数组；此外， =vector= 是一个类模板。
  - =vector= 是一个 =template= ，而不是一个 =type= 。

  #+BEGIN_SRC cpp
vector<int> ivec;
// give ivec some value      // 都是拷贝，而不是给予地址
vector<int> ivec2(ivec);     // copy elements of ivec into ivec2
vector<int> ivec3 = ivec;    // copy elements of ivec into ivec2

vector<string> svec(ivec2);  // error: 类型不同

  #+END_SRC


** 列表初始化
   
   #+BEGIN_SRC cpp

vector<string> articles = {"a", "an", "the"};

   #+END_SRC

** 指定数字建立表

   #+BEGIN_SRC cpp

vector<int> ivec(10, -1);    // 10个-1，在ivec里面
vector<string> svec(10, "hi");  // 10个"hi" 在 svec里面

   #+END_SRC


** for 的新用法【瀑布汗之前一直都不知道】

   #+BEGIN_SRC cpp

vector<int> v {1, 2, 3, 4, 5, 6, 7, 8, 9};
for (auto &i : v)
    i *= i;

for (auto &i : v)
    cout << i << " ";

cout << endl;

   #+END_SRC


** 使用 =vectoc= 时，直接使用 index 不会给数组添加新元素
   
   除非使用 =push_back= 函数
